.vakje
  = form_with( url: ( @user.persisted? ? "/admin/users/#{user.id}" : "/admin/users" ) , model: user, local: true) do |form|
    - if user.errors.any?
      #error_explanation
        %h2
          = t('activerecord.errors.template.header', :model => User.model_name.human, :count => @user.errors.count)

        %ul
          - user.errors.full_messages.each do |message|
            %li= message

    %label= t('common.name')
    = form.text_field :name
    %br

    %label= t('common.email')
    = form.text_field :email
    %br

    %label= t('common.language')
    = form.select :language, ["nl", "vls", "en", "fr"], {}, {:class=>""}
    %br

    - if current_user.has_role?(:admin)
      %label= t('common.roles')
      = form.select :roles, [["beheerder", :admin],["logopedist", :logopedist],["client", :client],["demo", :demo]], {}, {:multiple => true, :class=>"multiple_select"}
      %br

    - if current_user.has_role?(:logopedist)
      %label externe id
      = form.text_field :external_id
      %br

      %label api key (niet te wijzigen)
      %input.form-control.disabled{:disabled=>true, :type=>"text", :value=>@user.api_token}
      %br

    - elsif @user.has_role?(:logopedist)

      %label externe id
      = form.text_field :external_id
      %br

      %label api key (niet te wijzigen)
      %input.form-control.disabled{:disabled=>true, :type=>"text", :value=>@user.api_token}
      %br
      %br

      =# form.select :roles, [["client", :client]], {}, {:multiple => true, :class=>"multiple_select"}
    - else
      = form.hidden_field :roles, :multiple => true, :value=>"client"

    / add to current user -- don't do this!
    / = form.hidden_field :logopedist, :value => current_user.id.to_s

    - if !@user.persisted? #|| @user == current_user
      %p
        Let op: als u uw wachtwoord veranderd, wordt u gevraagd opnieuw in te loggen
      %label= t('common.password')
      = form.password_field :password
      %br

      %label= t('common.confirm_password')
      = form.password_field :password
      %br
      %br

    - if @user.persisted? && ( @user.has_role?(:client) || @user == current_user )
      %hr
      %h3#assigned_exercises
        = t('admin.clients.assigned_exercises')
        = "(#{user.exercises.where(:claimed_award => true).count}/"
        = "#{user.exercises.count})"
        %i.fa.fa-arrow-down

      %ul.huidige_oefeningen
        - @user.exercises.all.order(:created_at=>-1).sort_by{|k| k[:claimed_award].to_s }.each do |ex|
          = render partial: '/admin/oefening_item', :locals => {:exercise => ex}

      %hr

      %h3#available_exersises
        = t('admin.clients.available_exercises')
        = "(#{EXERCISES.count})"
        %i.fa.fa-arrow-down

      %ul.beschikbare_oefeningen

        .actions

          .filter-form{}
            %label= t('admin.clients.filter')
            %input#filter-input{:type=>"text"}        
          
          .filter-form{}
            %br
            &nbsp;
            %input#filter-existing{:type=>"checkbox"}
            %label{:style=>"display:inline"}= t('admin.clients.alles_tonen')

          .toepassen-form{:style=>"text-align:right;"}
            %br
            .pull-right= form.submit :value => t('common.save'), :class=>"emphasis"

        
        %hr
        - user_already_has_exercises = @user.exercises.map{|e| e.preset}
        = form.hidden_field :bulk_selected_new_exercies
        - EXERCISES.each do |ex|
          - if ex['id'].to_i.in?user_already_has_exercises
            - ex['hidden'] = "hidden was_assigned"
          - else 
            - ex['hidden'] = ""

          = render partial: '/admin/oefening_new', :locals => {:exercise => ex, :form => form}

    %hr

    %br
    .pull-right
      = form.submit :value => t('common.save'), :class=>"emphasis"
    %br
    %br

%br
%hr
%br

#text_modal
  .background
  .modal
    .modal-header
      .close_button.btn.btn-default x
      .title
    .modal-content
      .text
    .footer

/ depricated, we use a seperate viewer for this
#video_modal
  .background
  .modal
    .modal-header
      .close_button.btn.btn-default x
      .title
    .modal-content
      %video.videoplayer{:src=>"", :controls => true}
    .footer

- if @user.persisted? && ( @user.has_role?(:client) || @user == current_user )
  :javascript
    function init_exercises() {

      // dropdowns
      document.getElementById('assigned_exercises').onclick = function() {
        if ( document.querySelector('.huidige_oefeningen').style.display != "none" ) {
          document.querySelector('.huidige_oefeningen').style.display = "none"
        }else{
        document.querySelector('.huidige_oefeningen').style.display = "block"
        }
      }
      //document.querySelector('.huidige_oefeningen').style.display = "none"

      document.getElementById('available_exersises').onclick = function() {
        if ( document.querySelector('.beschikbare_oefeningen').style.display != "none" ) {
          document.querySelector('.beschikbare_oefeningen').style.display = "none"
        }else{
        document.querySelector('.beschikbare_oefeningen').style.display = "block"
        }
      }
      document.querySelector('.beschikbare_oefeningen').style.display = "none"

      // filters
      document.getElementById('filter-input').oninput = function(evt) {
        document.querySelectorAll('.new_exercise').forEach( function(_elm) {
          _elm.style.display = "block"
          currentInput = evt.target.value.toLowerCase()
          if (currentInput.length > 3) {
            _elm.style.display = "none"

            console.log( _elm.querySelector('.title').innerText )

            if ( _elm.querySelector('.title').innerText.toLowerCase().indexOf(currentInput) != -1 ) {
              _elm.style.display = "block"
            }

            if ( _elm.querySelector('.category').innerText.toLowerCase().indexOf(currentInput) != -1 ) {
              _elm.style.display = "block"
            }

            if ( _elm.querySelector('.tags').innerText.toLowerCase().indexOf(currentInput) != -1 ) {
              _elm.style.display = "block"
            }
          }
        })
      }
    }

    function show_text( _title, _text ) {
      var modal = document.getElementById('text_modal')
      modal.querySelector(".title").innerHTML = _title
      modal.querySelector(".text").innerHTML = _text
      modal.querySelector(".close_button").onclick = function() {
        modal.style.display = "none"
      }
      modal.style.display = "block"
    }

    function open_video_modal(_url) {

      var modal = document.getElementById('video_modal')
      modal.querySelector(".videoplayer").src = _url
      //modal.querySelector(".text").innerHTML = _text
      modal.querySelector(".close_button").onclick = function() {
        modal.style.display = "none"
        modal.querySelector(".videoplayer").pause()
      }
      modal.style.display = "block"
    }
    
    document.getElementById('filter-existing').onchange = function( checkbox ) {         
      document.querySelectorAll('.was_assigned').forEach( function( oefening ) {
        if ( checkbox.target.checked ) {
          oefening.classList.remove('hidden')
        }else{
          oefening.classList.add('hidden')
        }
      })
    }

    var bulk_selected_new_exercies = []
    document.querySelectorAll('.select_new_exercise').forEach( function(checkbox) {
      console.log("oi", checkbox.checked )
      console.log("oi", checkbox )

      checkbox.onchange = function( checkbox ) {
        console.log("oi oi", checkbox.target.checked )
        console.log(checkbox.target)
        var _id = checkbox.target.dataset.id
        if (checkbox.target.checked) {        
          document.getElementById("new_exercise_"+_id).classList.add('selected')        
        }else{
          document.getElementById("new_exercise_"+_id).classList.remove('selected')
        }

        update_new_exercises()
      }
    })

    function update_new_exercises() {
      bulk_selected_new_exercies = []
      document.querySelectorAll('.new_exercise.selected').forEach(function(elm) {
        console.log("got id for selected", elm.dataset.id )
        ex = {
          "exercise_id": elm.dataset.id, 
          "frequency": document.getElementById('frequency_' + elm.dataset.id).value,
          "target": document.getElementById('target_' + elm.dataset.id).value
        }

        bulk_selected_new_exercies.push(ex)
      })

      // updated array
      console.log(bulk_selected_new_exercies)
      
      // update hidden
      document.getElementById("user_bulk_selected_new_exercies").value = JSON.stringify(bulk_selected_new_exercies)
      // document.getElementById("user_bulk_selected_new_exercies").value = bulk_selected_new_exercies.join(",")
    }

    document.querySelectorAll('.new_exercise_input').forEach( function(input_element) {
      input_element.onchange = function() { update_new_exercises() }
      input_element.ontext = function() { update_new_exercises() }
      input_element.oninput = function() { update_new_exercises() }
    })

    // main
    init_exercises();
